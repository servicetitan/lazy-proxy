<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <Version>1.0.0</Version>
    <PackageId>LazyProxy</PackageId>
    <Title>Dynamic Lazy Proxy</Title>
    <Company>ServiceTitan, Inc.</Company>
    <Authors>ServiceTitan, Inc.</Authors>
    <Copyright>Copyright ServiceTitan, Inc.</Copyright>
    <PackageProjectUrl>https://github.com/servicetitan/lazy-proxy</PackageProjectUrl>
    <PackageLicenseUrl>https://github.com/servicetitan/lazy-proxy/blob/master/LICENSE</PackageLicenseUrl>
    <RepositoryUrl>https://github.com/servicetitan/lazy-proxy</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>lazy proxy dynamic runtime wrapper</PackageTags>
    <Description>A dynamic lazy proxy is a class built in real time, that implemenets some interface T, takes to the constructor an argument Lazy of T and routes all invocations to the corresponding method or property of this argument.
The real instance wrapped by Lazy of T is created only after the first invocation of method or property. It allows to distribute the loading from the class creation to the method or property invocation.</Description>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="System.Reflection.Emit" Version="4.3.0" />
  </ItemGroup>
</Project>
